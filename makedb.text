/*

This file creates the database structure. It does not add data. If modified, keep to the
naming scheme.

The Entities are: Player, Weapon, Character.

Each player has multiple characters.
  As such, each character has a foreign key playerid.
Each character can have multiple weapons.
Each weapon can have multiple characters.
  As such there a junction table named CharacterWeapons.

As this is meant to show basic SQL, I avoided adding too many properties to
each table.
*/
-- CREATE DATABASE darkrpg;

CREATE TABLE Players
(
PlayerName varchar(50) NOT NULL UNIQUE,
-- password is encrypted by the application
PlayerPassword varchar(50) NOT NULL,
PlayerEmail varchar(50) NOT NULL UNIQUE,
PlayerID int NOT NULL PRIMARY KEY
);

CREATE TABLE Weapons
(
-- Made the weapon name unique because it would hurt users if they couldn't
-- memorise weapon stats by name, in the long term
WeaponName varchar(50) NOT NULL UNIQUE,
WeaponDice int NOT NULL,
WeaponDiceType int NOT NULL,
WeaponDiceMod int NOT NULL,
DamageType varchar(50) NOT NULL,
WeaponID int NOT NULL PRIMARY KEY
);

CREATE TABLE Characters
(
PlayerID int NOT NULL,
CharacterID int PRIMARY KEY,
CharacterName varchar(50) NOT NULL UNIQUE,
CharacterGender varchar(50) NOT NULL,
CharacterDescription varchar(100) NOT NULL,
-- Handles a 1 to many relationship
FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID)
);

-- Junction table handling a many to many relationship between characters and
-- weapons
CREATE TABLE CharacterWeapons
(
CharacterID varchar(50) REFERENCES Characters (CharacterID),
WeaponID varchar(50) REFERENCES Weapons (WeaponID),
PRIMARY KEY (CharacterID, WeaponID)
);

-- INDEXES
-- The Character Name is searched a lot. As such, it gets an index.
CREATE UNIQUE INDEX CharacterIndex ON Characters (CharacterName);

